trigger:
  branches:
    include:
    - master
  paths:
    include:
      - src/Services/API/*
      - src/Gateways/*
      - k8s/charts/ketopal-api/*
pr: none

resources:
- repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Azure.ServiceConnectionId: 'NebbiaPartner'
  ACR.ContainerRegistryServiceConnnection: 'NebbiaRegistry'
  ACR.Name: nebbiaregistry
  Chart.Name: ketopal-api
  Service.Name: api
  Service.Dockerfile: src/Services/API/KetoPal.Api/Dockerfile
  # ========================================================================
  #                           Optional variables 
  # ========================================================================
  ACR.RepositoryName: '$(ACR.Name)'
  ACR.ImageName: '$(ACR.Name):$(Build.BuildId)'
  ACR.FullName: '$(ACR.Name).azurecr.io'
  System.Debug: 'false'

stages:
- stage: Build
  displayName: Build and Publish Stage
  jobs:  
  - job: Build
    displayName: Build and Publish
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # - task: DockerCompose@0
    #   displayName: "Build using Docker Compose"
    #   inputs:
    #     containerregistrytype: 'Azure Container Registry'
    #     azureSubscriptionEndpoint: $(Azure.ServiceConnectionId)
    #     azureContainerRegistry: $(ACR.FullName)
    #     dockerComposeFile: docker-compose.yml
    #     dockerComposeCommand: 'build $(Service.Name)'
    #     includeSourceTags: true
    #     includeLatestTag: true

    # - task: Bash@3
    #   displayName: "Tag Image using Bash"
    #   inputs:
    #     targetType: 'inline' # Optional. Options: filePath, inline
    #     script: 'docker tag $(ACR.FullName)/ketopal/$(Service.Name):linux-latest $(ACR.FullName)/ketopal/$(Service.Name):$(Build.BuildNumber)' # Required when targetType == Inline

    # - task: DockerCompose@0
    #   displayName: "Publish using Docker Compose"
    #   inputs:
    #     containerregistrytype: 'Azure Container Registry'
    #     azureSubscriptionEndpoint: $(Azure.ServiceConnectionId)
    #     azureContainerRegistry: $(ACR.FullName)
    #     dockerComposeFile: docker-compose.yml
    #     dockerComposeCommand: 'push $(Service.Name)'
    #     includeSourceTags: true
    #     includeLatestTag: true

    - task: Docker@2
      displayName: Build and Push
      inputs:
        command: buildAndPush
        containerRegistry: $(ContainerRegistryServiceConnnection)
        repository: $(ACR.FullName)/ketopal/$(Service.Name)
        Dockerfile: $(Service.Dockerfile)
        tags: |
          $(Build.BuildNumber)

    - task: HelmInstaller@1
      displayName: Helm installer
      inputs: 
        helmVersionToInstall: latest

    - task: HelmDeploy@0
      displayName: 'Init Helm Client'
      inputs:
        connectionType: None
        command: init
        arguments: '--client-only'

    - task: HelmDeploy@0
      displayName: 'Package Helm Charts'
      inputs:
        connectionType: None
        command: package
        chartPath: 'k8s/charts/$(Chart.Name)'
        chartVersion: '$(Build.BuildId)'
        destination: $(Build.ArtifactStagingDirectory)
        updateDependency: true

    - task: AzureCLI@1
      displayName: 'Push helm chart'
      inputs:
        azureSubscription: $(Azure.ServiceConnectionId)
        scriptLocation: inlineScript
        inlineScript: 'az acr helm push -n $(ACR.RepositoryName) $(Build.ArtifactStagingDirectory)/$(Chart.Name)-$(Build.BuildId).tgz'
        conditions: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/master'))
        
    - task: CopyFiles@2
      displayName: "Copy Helm Charts"
      inputs: 
        SourceFolder: './k8s/charts'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactsStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: "Publish Build Artifacts"
      inputs: 
        ArtifactName: 'helm'
        PathtoPublish: '$(Build.ArtifactsStagingDirectory)'